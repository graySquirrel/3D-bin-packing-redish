# # 589.8,243.8,259.1
# [
# [(0, 0, 0), (0, 243.8, 0), (589.8, 0, 0), (589.8, 243.8, 0)],

# [(0, 0, 46.0), (0, 82.0, 46.0), (170.0, 0, 46.0), (170.0, 82.0, 46.0)], 
# [(170.0, 0.0, 46.0), (170.0, 82.0, 46.0), (340.0, 0.0, 46.0), (340.0, 82.0, 46.0)],
# [(340.0, 0.0, 46.0), (340.0, 82.0, 46.0), (510.0, 0.0, 46.0), (510.0, 82.0, 46.0)],
# [(510.0, 0.0, 170.0), (510.0, 82.0, 170.0), (556.0, 0.0, 170.0), (556.0, 82.0, 170.0)],
# [(0.0, 82.0, 46.0), (0.0, 164.0, 46.0), (170.0, 82.0, 46.0), (170.0, 164.0, 46.0)],
# [(170.0, 82.0, 46.0), (170.0, 164.0, 46.0), (340.0, 82.0, 46.0), (340.0, 164.0, 46.0)],
# [(340.0, 82.0, 46.0), (340.0, 164.0, 46.0), (510.0, 82.0, 46.0), (510.0, 164.0, 46.0)],
# [(510.0, 82.0, 170.0), (510.0, 164.0, 170.0), (556.0, 82.0, 170.0), (556.0, 164.0, 170.0)],
# [(0.0, 164.0, 170.0), (0.0, 210.0, 170.0), (82.0, 164.0, 170.0), (82.0, 210.0, 170.0)],
# [(82.0, 164.0, 170.0), (82.0, 210.0, 170.0), (164.0, 164.0, 170.0), (164.0, 210.0, 170.0)],
# [(164.0, 164.0, 60.0), (164.0, 224.0, 60.0), (249.0, 164.0, 60.0), (249.0, 224.0, 60.0)],
# [(249.0, 164.0, 60.0), (249.0, 224.0, 60.0), (334.0, 164.0, 60.0), (334.0, 224.0, 60.0)],
# [(334.0, 164.0, 60.0), (334.0, 224.0, 60.0), (419.0, 164.0, 60.0), (419.0, 224.0, 60.0)], 
# [(419.0, 164.0, 60.0), (419.0, 224.0, 60.0), (504.0, 164.0, 60.0), (504.0, 224.0, 60.0)], 
# [(504.0, 164.0, 60.0), (504.0, 224.0, 60.0), (589.0, 164.0, 60.0), (589.0, 224.0, 60.0)], 
# [(0.0, 0.0, 106.0), (0.0, 60.0, 106.0), (85.0, 0.0, 106.0), (85.0, 60.0, 106.0)], 
# [(85.0, 0.0, 106.0), (85.0, 60.0, 106.0), (170.0, 0.0, 106.0), (170.0, 60.0, 106.0)], 
# [(170.0, 0.0, 106.0), (170.0, 60.0, 106.0), (255.0, 0.0, 106.0), (255.0, 60.0, 106.0)], 
# [(255.0, 0.0, 106.0), (255.0, 60.0, 106.0), (340.0, 0.0, 106.0), (340.0, 60.0, 106.0)], 
# [(340.0, 0.0, 106.0), (340.0, 60.0, 106.0), (425.0, 0.0, 106.0), (425.0, 60.0, 106.0)], 
# [(425.0, 0.0, 106.0), (425.0, 60.0, 106.0), (510.0, 0.0, 106.0), (510.0, 60.0, 106.0)], 
# [(0.0, 60.0, 106.0), (0.0, 120.0, 106.0), (85.0, 60.0, 106.0), (85.0, 120.0, 106.0)], 
# [(85.0, 60.0, 106.0), (85.0, 120.0, 106.0), (170.0, 60.0, 106.0), (170.0, 120.0, 106.0)], 
# [(170.0, 60.0, 106.0), (170.0, 120.0, 106.0), (255.0, 60.0, 106.0), (255.0, 120.0, 106.0)], 
# [(255.0, 60.0, 106.0), (255.0, 120.0, 106.0), (340.0, 60.0, 106.0), (340.0, 120.0, 106.0)], 
# [(340.0, 60.0, 106.0), (340.0, 120.0, 106.0), (425.0, 60.0, 106.0), (425.0, 120.0, 106.0)], 
# [(425.0, 60.0, 106.0), (425.0, 120.0, 106.0), (510.0, 60.0, 106.0), (510.0, 120.0, 106.0)], 
# [(510.0, 0.0, 230.0), (510.0, 85.0, 230.0), (570.0, 0.0, 230.0), (570.0, 85.0, 230.0)], 
# [(510.0, 85.0, 230.0), (510.0, 170.0, 230.0), (570.0, 85.0, 230.0), (570.0, 170.0, 230.0)], 
# [(510.0, 170.0, 255.0), (510.0, 230.0, 255.0), (570.0, 170.0, 255.0), (570.0, 230.0, 255.0)]
# ]
# (510.0, 170.0, 60.0), (510.0, 230.0, 60.0), (570.0, 170.0, 60.0), (570.0, 230.0, 255.0)



# 510,570,170,230,60
# top_depth = 4
# z_bottom = [5,0,0]
# z_top = [9,5,10]
# a = []
# for j in range(len(z_top)):
#         b = [i for i in range(int(z_bottom[j]),int(z_top[j]+1))]
#         for k in b:
#             if k not in a:
#                 a.append(k)
# c =  set([i for i in range(0,max(a)+1)])
# r = c - set(a)
# if len(r) > 0:
#     if min(r) > 0 :
#         r = [i for i in range(min(r)-1,max(r)+2)]
#     elif min(r) == 0 :
#         r = [i for i in range(min(r),max(r)+2)]
#     else :
#         raise ValueError
    
#     if len(r) >= top_depth:
#         print(min(r))
# else :
#     print(max(z_top))

# # 數量s
# item = [1,2,3]
# # 旋轉
# rotation = [a,b,c]
# # 順序
# pos = len(item) * 

# for i in li :
w = 1
f = []
a = [[0,0],[0,5],[13,19],[4,13],[5,12],[20,23],[5,16],[25,27],[30,30]]
# [[0,0],[0,5],[5,12],[5,13],[5,16],[13,19],[20,23],[25,27],[30,30]]
# a = [[0,0],[0,1],[4,4]]
a = sorted(a)
for i in range(len(a)-1) :
    if a[i+1][0] - a[i][1] >= w : 
        f.append(a[i][1])


print(123)
